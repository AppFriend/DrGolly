Tracking Code & Event Pixel Setup for Web App (React on Replit)
Objective:
Implement and verify the following tracking tags (Google Ads, Pinterest, TikTok, LinkedIn, Meta, and Reddit Ads) safely and fully into our existing React-based web app hosted on Replit.

üõë DO NOT BREAK any existing site functionality. All features, forms, routing, and UI behavior must remain intact.

‚úÖ GENERAL INSTRUCTIONS
Use react-helmet or direct DOM injection to safely inject third-party scripts in the <head> and body.

Ensure scripts only load once, and in the correct lifecycle stage (on mount, on click, etc.).

Handle Single Page App (SPA) behavior:

Re-trigger tracking (e.g., gtag('config'), fbq('track')) on route changes if required.

Use useEffect, Helmet, or equivalent methods for page-level script loading.

Wrap custom event conversions (clicks, purchases) with event handlers, without overriding existing logic.

Conversion values (like revenue) should be passed dynamically where applicable.

Create a dedicated tracking/events utility (e.g., utils/tracking.js) to isolate logic cleanly.

üîç PLATFORM-SPECIFIC IMPLEMENTATION DETAILS
1. Google Ads
‚úÖ Universal Tag (All Pages)
Place in index.html or via Helmet at top-level:

html
Copy
Edit
<!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=AW-389499988"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());
  gtag('config', 'AW-389499988');
</script>
‚úÖ App Sign-Up (on click)
Wrap sign-up CTA (e.g., button click):

js
Copy
Edit
function handleSignUpClick() {
  const callback = () => {
    // redirect or other logic
  };
  window.gtag?.('event', 'conversion', {
    send_to: 'AW-389499988/OswFCJr7icsaENSY3bkB',
    event_callback: callback,
  });
}
‚úÖ Purchase (on page load)
On successful purchase confirmation page:

js
Copy
Edit
useEffect(() => {
  window.gtag?.('event', 'conversion', {
    send_to: 'AW-389499988/Oe6QCJmi5P8BENSY3bkB',
    value: 100.0, // Replace with dynamic amount
    currency: 'AUD',
    transaction_id: '', // optional dynamic ID
  });
}, []);
2. Pinterest
‚úÖ Base Tag (All Pages)

html
Copy
Edit
<script>
!function(e){if(!window.pintrk){window.pintrk = function () {
window.pintrk.queue.push(Array.prototype.slice.call(arguments))};var
n=window.pintrk;n.queue=[],n.version="3.0";var
t=document.createElement("script");t.async=!0,t.src=e;var
r=document.getElementsByTagName("script")[0];
r.parentNode.insertBefore(t,r)}}("https://s.pinimg.com/ct/core.js");
pintrk('load', '2612380559141', {em: '<user_email_address>'});
pintrk('page');
</script>
‚úÖ Pinterest Sign-Up Event (on click)

js
Copy
Edit
pintrk('track', 'signup', {
  event_id: 'eventId0001',
  lead_type: 'App'
});
‚úÖ Pinterest Purchase Event (on page load)

js
Copy
Edit
pintrk('track', 'checkout', {
  event_id: 'eventId0001',
  value: 100, // Replace with dynamic value
  order_quantity: 1,
  currency: 'USD'
});
3. TikTok Pixel
‚úÖ Universal Tag (All Pages)

html
Copy
Edit
<script>
!function (w, d, t) {
  w.TiktokAnalyticsObject=t;
  var ttq=w[t]=w[t]||[];
  ttq.methods=["page","track","identify","instances","debug","on","off","once","ready","alias","group","enableCookie","disableCookie"];
  ttq.setAndDefer=function(t,e){t[e]=function(){t.push([e].concat(Array.prototype.slice.call(arguments,0)))}};
  for(var i=0;i<ttq.methods.length;i++)ttq.setAndDefer(ttq,ttq.methods[i]);
  ttq.instance=function(t){for(var e=ttq._i[t]||[],n=0;n<ttq.methods.length;n++)ttq.setAndDefer(e,ttq.methods[n]);return e};
  ttq.load=function(e,n){
    var i="https://analytics.tiktok.com/i18n/pixel/events.js";
    ttq._i=ttq._i||{},ttq._i[e]=[],ttq._i[e]._u=i,
    ttq._t=ttq._t||{},ttq._t[e]=+new Date,
    ttq._o=ttq._o||{},ttq._o[e]=n||{};
    n=document.createElement("script");
    n.type="text/javascript",n.async=!0,n.src=i+"?sdkid="+e+"&lib="+t;
    e=document.getElementsByTagName("script")[0];
    e.parentNode.insertBefore(n,e)
  };
  ttq.load('CCO0N03C77U3QS7T8KLG');
  ttq.page();
}(window, document, 'ttq');
</script>
4. LinkedIn
‚úÖ Universal Insight Tag (All Pages)

html
Copy
Edit
<script type="text/javascript">
_linkedin_partner_id = "3257164";
window._linkedin_data_partner_ids = window._linkedin_data_partner_ids || [];
window._linkedin_data_partner_ids.push(_linkedin_partner_id);
</script>
<script type="text/javascript">
(function(l) {
if (!l){window.lintrk = function(a,b){window.lintrk.q.push([a,b])};
window.lintrk.q=[]}
var s = document.getElementsByTagName("script")[0];
var b = document.createElement("script");
b.type = "text/javascript";b.async = true;
b.src = "https://snap.licdn.com/li.lms-analytics/insight.min.js";
s.parentNode.insertBefore(b, s);})(window.lintrk);
</script>
5. Meta Pixel (Facebook)
‚úÖ Base Pixel Code

html
Copy
Edit
<script>
!function(f,b,e,v,n,t,s)
{if(f.fbq)return;n=f.fbq=function(){n.callMethod?
n.callMethod.apply(n,arguments):n.queue.push(arguments)};
if(!f._fbq)f._fbq=n;n.push=n;n.loaded=!0;n.version='2.0';
n.queue=[];t=b.createElement(e);t.async=!0;
t.src=v;s=b.getElementsByTagName(e)[0];
s.parentNode.insertBefore(t,s)}(window,document,'script',
'https://connect.facebook.net/en_US/fbevents.js');
fbq('init', '1778915552268946'); 
fbq('track', 'PageView');
</script>
‚ö†Ô∏è Custom Meta Events:
Once the base code is installed, you can manually configure purchase, signup, and custom events via Business Manager. Or optionally, add manual events using the Meta docs:
üëâ Meta Event Reference

6. Reddit Ads
‚úÖ Reddit Pixel:
Follow latest documentation (install via custom script):

üìÑ Official Reddit Help Guide

Ensure to:

Use redditq.push() calls to track events.

Include the base pixel in the global layout or index file.

üß™ FINAL VALIDATION CHECKLIST
 Scripts load correctly on first render (no duplicates).

 Pageview fires on route changes (SPA awareness).

 All click/purchase events are tested and fire (check using browser devtools or respective ad platforms).

 Pixel helper tools (Meta, Pinterest, etc.) confirm loading.

 No breaking changes or JS errors are introduced.

 Scripts are wrapped in useEffect or DOM-safe injection methods.