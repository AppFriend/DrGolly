Yes ‚Äî those extra details are *excellent* and absolutely help strengthen and clarify your Replit prompt. Based on your stack:

* ‚úÖ **React + TypeScript**: ensures type safety ‚Äî we‚Äôll want modular, strongly typed components.
* ‚úÖ **Vite**: fast builds and hot reload, so the code structure should stay lightweight and modular.
* ‚úÖ **Wouter**: URL routing will be simpler, but we need to specify route param handling for `:productId`.
* ‚úÖ **Tailwind + shadcn/ui**: we‚Äôll make sure all components follow this system (no raw HTML styles).
* ‚úÖ **Express.js**: allows server-side coupon validation, price protection, and safe Stripe key handling.

Here‚Äôs your updated **full Replit prompt**, tailored to your stack:

---

### ‚úÖ Replit Prompt: Build Scalable React + TypeScript Checkout Page (Stripe, Vite, Wouter, shadcn/ui)

**Objective:**
Build a modern, high-performance checkout page using **React with TypeScript**, powered by **Vite**, **Wouter** for routing, and styled with **Tailwind CSS** and **shadcn/ui**. The page must fully replicate the layout shown in the two attached screenshots from [https://drgolly.com/checkout](https://drgolly.com/checkout) ‚Äî and integrate cleanly with our Express.js backend and Stripe.

---

### üîß Stack Requirements

Use the following technologies:

* **Frontend:** React + TypeScript
* **Bundler:** Vite
* **Routing:** Wouter (client-side)
* **Styling:** Tailwind CSS + shadcn/ui
* **Backend:** Express.js (serving the app + Stripe API calls)

---

### üåê Routing + Product Fetching

* Route: `/checkout-new/:productId` (handled via **Wouter**)
* On load, fetch product info from our **backend** using the `productId` param:

  * Course Name
  * Stripe Product ID
  * Pricing table (for AUD / USD / EUR)
  * One-off vs subscription flag
* Load and render this info in the UI dynamically

---

### üí≥ Stripe Integration (Web Best Practice)

Use **Stripe Elements** and support:

* Credit/Debit card
* Apple Pay
* Google Pay
* Stripe Link

**Required logic:**

* Use `loadStripe` and `Elements` with secure keys from the Express backend
* Dynamically determine:

  * Product name
  * Regional pricing
  * Subscription vs one-time charge
* Use your **existing Stripe pricing table** in DB (AUD: \$120, USD: \$120, EUR: ‚Ç¨60)
* Respect **coupon codes** (test with `CHECKOUT-99`) with:

  * Live price update on apply
  * Protection layer on server: Stripe must receive correct **final price**
* Fix prior bug where full price was charged despite active coupon

---

### üßæ Checkout Form Features

* Build using **shadcn/ui components**, fully styled with **Tailwind**
* Match layout in attached screenshots
* Payment fields must **always mount on page load** ‚Äî no conditional rendering delays
* Fields:

  * Name
  * Email
  * Phone
  * Address
  * Baby‚Äôs DOB (optional)
  * Expandable coupon field (expanded by default)

---

### üë§ User Flow Logic

* **If known email** (from DB): prompt login before completing checkout
* **If new email**: allow checkout, then redirect to `/complete` post-purchase
* **If user is logged in**:

  * Enable multi-item cart
  * Route to `/home` post-purchase

---

### üõ°Ô∏è Express Backend Tasks

* Serve React app
* Handle:

  * Secure Stripe secret keys
  * Product info fetch by ID
  * Coupon validation
  * Regional pricing logic
  * Webhook for payment success (to redirect correctly)
* Ensure error logging and validation layers are included

---

### üì¶ Folder Structure (Recommended)

```
/src
  /components
    CheckoutForm.tsx
    CouponField.tsx
    PaymentSection.tsx
  /pages
    CheckoutPage.tsx
  /routes
    index.tsx (Wouter setup)
  /utils
    stripeHelpers.ts
    regionPricing.ts
  /types
    product.ts
    checkout.ts
```

---

### üîç Testing & Stability

* Ensure all payment flows are tested in:

  * Development (Vite dev server)
  * Production (Express build)
* Validate:

  * Stripe Elements mount correctly
  * Coupons parse correctly both client/server
  * Regional price is fetched + parsed before creating PaymentIntent
  * Logged-in vs new user flows behave properly
* Provide testing logs and catch/report all errors with clear error messages

---

### ‚ö†Ô∏è Known Issues to Guard Against

* Stripe Elements not rendering due to unfilled fields
* Coupon price mismatch between frontend and backend
* Stripe Link/Apple Pay failing to mount due to over-complex code
* Server keys exposed in frontend ‚Äî use backend securely

---

### üìé Provided Assets

* Checkout layout screenshots
* Product-to-ID map in DB
* Test coupon: `CHECKOUT-99`
* Stripe + pricing tables pre-configured

---

Let me know if you want a version of this prompt bundled as a GitHub issue or sprint card format, or I can generate a scaffolded folder structure for you next.
