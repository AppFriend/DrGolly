import { toast } from "@/hooks/use-toast";

// Copy protection utility
export class CopyProtection {
  private static instance: CopyProtection;
  private isEnabled = true;

  private constructor() {
    this.initializeCopyProtection();
  }

  static getInstance(): CopyProtection {
    if (!CopyProtection.instance) {
      CopyProtection.instance = new CopyProtection();
    }
    return CopyProtection.instance;
  }

  private initializeCopyProtection() {
    // Prevent text selection on course content
    document.addEventListener('selectstart', this.preventSelection);
    
    // Prevent copy keyboard shortcut
    document.addEventListener('keydown', this.preventCopyShortcuts);
    
    // Prevent right-click context menu
    document.addEventListener('contextmenu', this.preventContextMenu);
    
    // Prevent drag and drop
    document.addEventListener('dragstart', this.preventDragStart);
    
    // Prevent print screen and developer tools
    document.addEventListener('keydown', this.preventScreenCapture);
  }

  private preventSelection = (e: Event) => {
    const target = e.target as HTMLElement;
    if (this.isEnabled && this.isProtectedContent(target)) {
      e.preventDefault();
      this.showProtectionMessage();
      return false;
    }
  };

  private preventCopyShortcuts = (e: KeyboardEvent) => {
    if (!this.isEnabled) return;

    const target = e.target as HTMLElement;
    if (this.isProtectedContent(target)) {
      // Prevent Ctrl+C, Ctrl+A, Ctrl+V, Ctrl+X
      if (e.ctrlKey && ['c', 'a', 'v', 'x'].includes(e.key.toLowerCase())) {
        e.preventDefault();
        this.showProtectionMessage();
        return false;
      }
      
      // Prevent F12 (Developer Tools)
      if (e.key === 'F12') {
        e.preventDefault();
        this.showProtectionMessage();
        return false;
      }
      
      // Prevent Ctrl+Shift+I (Developer Tools)
      if (e.ctrlKey && e.shiftKey && e.key === 'I') {
        e.preventDefault();
        this.showProtectionMessage();
        return false;
      }
    }
  };

  private preventContextMenu = (e: MouseEvent) => {
    const target = e.target as HTMLElement;
    if (this.isEnabled && this.isProtectedContent(target)) {
      e.preventDefault();
      this.showProtectionMessage();
      return false;
    }
  };

  private preventDragStart = (e: DragEvent) => {
    const target = e.target as HTMLElement;
    if (this.isEnabled && this.isProtectedContent(target)) {
      e.preventDefault();
      this.showProtectionMessage();
      return false;
    }
  };

  private preventScreenCapture = (e: KeyboardEvent) => {
    if (!this.isEnabled) return;

    // Prevent Print Screen
    if (e.key === 'PrintScreen') {
      e.preventDefault();
      this.showProtectionMessage();
      return false;
    }
  };

  private isProtectedContent(element: HTMLElement): boolean {
    // Check if element is within course content area
    return element.closest('.course-content') !== null ||
           element.closest('.course-module') !== null ||
           element.closest('.course-chapter') !== null ||
           element.closest('[data-protected="true"]') !== null;
  }

  private showProtectionMessage() {
    toast({
      title: "Content Protection",
      description: "Our content is generated by medical professionals and is copyrighted for the use of our members, which is why we don't allow copy and paste.",
      variant: "destructive",
    });
  }

  // Method to enable/disable protection (for admin users)
  public setEnabled(enabled: boolean) {
    this.isEnabled = enabled;
  }

  // Method to protect specific elements
  public protectElement(element: HTMLElement) {
    element.setAttribute('data-protected', 'true');
    element.style.userSelect = 'none';
    element.style.webkitUserSelect = 'none';
    element.style.msUserSelect = 'none';
    element.style.webkitTouchCallout = 'none';
    element.style.webkitTapHighlightColor = 'transparent';
  }

  // Clean up event listeners
  public destroy() {
    document.removeEventListener('selectstart', this.preventSelection);
    document.removeEventListener('keydown', this.preventCopyShortcuts);
    document.removeEventListener('contextmenu', this.preventContextMenu);
    document.removeEventListener('dragstart', this.preventDragStart);
    document.removeEventListener('keydown', this.preventScreenCapture);
  }
}

// CSS styles for copy protection
export const copyProtectionStyles = `
  .course-content,
  .course-module,
  .course-chapter,
  [data-protected="true"] {
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
    -webkit-touch-callout: none;
    -webkit-tap-highlight-color: transparent;
  }

  .course-content *,
  .course-module *,
  .course-chapter *,
  [data-protected="true"] * {
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
  }

  /* Prevent highlighting on mobile */
  .course-content::selection,
  .course-module::selection,
  .course-chapter::selection,
  [data-protected="true"]::selection {
    background: transparent;
  }

  .course-content::-moz-selection,
  .course-module::-moz-selection,
  .course-chapter::-moz-selection,
  [data-protected="true"]::-moz-selection {
    background: transparent;
  }
`;